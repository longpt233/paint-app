
package paint;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 *
 * @author Khanh
 */
public class ReplayDialog extends javax.swing.JDialog {

    /**
     * Creates new form ReplayDialog
     */
    private PaintState paintState;
    private ImageIcon playIcon;
    private ImageIcon pauseIcon;
    private ImageIcon stopIcon;
    private ReplayPanel replayPanel;
    private JPanel containerPanel;
    private BufferedImage buff_img;
    private boolean saveToFile = false;

    public ReplayDialog(java.awt.Frame parent, boolean modal, PaintState paintState) {
        super(parent, modal);
        playIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/play.png")));
        pauseIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/pause.png")));
        stopIcon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/icon/stop.png")));
       
        this.paintState = paintState;
        initComponents();
         bPlay.setIcon(pauseIcon);
//        bStop.setIcon(stopIcon);
        containerPanel = new JPanel();
        containerPanel.setLayout(null);
        replayPanel = new ReplayPanel();
        replayPanel.setPaintState(paintState);
        buff_img = replayPanel.getBuffer();
        containerPanel.setPreferredSize(new Dimension(replayPanel.getWidth() + 100, replayPanel.getHeight() + 50));
        containerPanel.add(replayPanel);
        scrollPane.setViewportView(containerPanel);
        containerPanel.add(replayPanel);
        containerPanel.validate();
        replayPanel.setButton(bPlay);
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {

            }

        });
        this.setTitle("Untitled-Replay Dialog");
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
         // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
         private void initComponents() {

                  buttonGroup1 = new javax.swing.ButtonGroup();
                  scrollPane = new javax.swing.JScrollPane();
                  speed = new javax.swing.JSlider();
                  bPlay = new javax.swing.JToggleButton();
                  jMenuBar1 = new javax.swing.JMenuBar();

                  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                  addWindowListener(new java.awt.event.WindowAdapter() {
                           public void windowClosing(java.awt.event.WindowEvent evt) {
                                    formWindowClosing(evt);
                           }
                  });

                  speed.setValueIsAdjusting(true);
                  speed.addChangeListener(new javax.swing.event.ChangeListener() {
                           public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                    speedStateChanged(evt);
                           }
                  });

                  buttonGroup1.add(bPlay);
                  bPlay.addActionListener(new java.awt.event.ActionListener() {
                           public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    bPlayActionPerformed(evt);
                           }
                  });
                  setJMenuBar(jMenuBar1);

                  javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                  getContentPane().setLayout(layout);
                  layout.setHorizontalGroup(
                           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                             .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
                                             .addGroup(layout.createSequentialGroup()
                                                      .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                      .addComponent(bPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                      .addGap(273, 273, 273)
                                                      .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  );
                  layout.setVerticalGroup(
                           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(layout.createSequentialGroup()
                                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                             .addComponent(speed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                             .addComponent(bPlay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addContainerGap())
                  );

                  pack();
         }// </editor-fold>//GEN-END:initComponents

    private void bPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPlayActionPerformed
        containerPanel.setSize(new Dimension(replayPanel.getSize()));
        containerPanel.setMinimumSize(new Dimension(replayPanel.getSize()));
        if (replayPanel.isPlaying()) {
            bPlay.setIcon(pauseIcon);
            replayPanel.pauseReplay();

        } else {
            bPlay.setIcon(playIcon);
            replayPanel.startReplay();
        }
    }//GEN-LAST:event_bPlayActionPerformed

    private void speedStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_speedStateChanged
        changeSpeed(speed.getValue());
    }//GEN-LAST:event_speedStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing


         // Variables declaration - do not modify//GEN-BEGIN:variables
         private javax.swing.JToggleButton bPlay;
         private javax.swing.ButtonGroup buttonGroup1;
         private javax.swing.JMenuBar jMenuBar1;
         private javax.swing.JScrollPane scrollPane;
         private javax.swing.JSlider speed;
         // End of variables declaration//GEN-END:variables
    public void changeSpeed(int value) {
        replayPanel.setDelay(value);
    }
}
